package com.szalay.thinktools.model;

import java.util.Date;
import java.util.List;

/**
 * This class contains algorithms to resolve inhomogenities in
 * causal models.
 * 
 *  *  this class manages tests for inhomogenities in causal models
 *
 *  there are three possabilities for a factor f to lie in a relation u -> w
 *
 *  1) between           -   change u -> w to u->f & if->w
 *  2) is epiphenomen    -          u -> w    f->u & f->w
 *  3) is effect         -          u -> w    u->w & w->f
 
 */
public class InhomogenitySolver {
    /**
     *  this method checks for the first possibility
     *
     *  @param CausalHypothesis the current causel model u -> w
     *  @param Factor the factor f to test
     */
    public static CausalModel isBetween(final CausalModel model, 
            final CausalHypothesis startModel, final Factor testFactor, final DataModel dataModel){
        
        //extract necessary factors
        final Factor leftSideFactor = testFactor;
        final List<ComplexCause> complexCauses = startModel.getComplexCauses();
        final ComplexCause c = complexCauses.get(0);
        
        //design test
        final DifferenceTest test = TestDesigner.createGeneralDifferenceTest(startModel, c, leftSideFactor);
        
        //perform test
        final MultipleContingencyTable table = test.perform(dataModel);
        
        //generate causal table
        final MultipleCausalTable causalTable = TestInterpreter.createMultipleCausalTable(table, table.averageCellValue());
        
        final MultipleCausalTableLine line = causalTable.getLines().get(0);
        final MultipleCausalTableCell a = line.getA();
        final MultipleCausalTableCell b = line.getB();
        
        if ((a.isValue()) && (b.isValue() == false)){
            model.remove(startModel);
            CausalHypothesis hyp1 = new CausalHypothesis("generated by InhomogentitySolver, at " + new Date().toString());
            hyp1.getComplexCauses().add(c);
            hyp1.setEffect(testFactor);
            model.add(hyp1);
            
            CausalHypothesis hyp2 = new CausalHypothesis("generated by InhomogentitySolver, at " + new Date().toString());
            ComplexCause newC = new ComplexCause();
            newC.add(testFactor);
            hyp2.getComplexCauses().add(newC);
            hyp2.setEffect(startModel.getEffect());
            model.add(hyp2);
            return model;
        }
        
        return model;
    }
    
    /**
     *  this method checks if the test factor is the common cause
     */
    public static CausalModel isCommonCause(final CausalModel model, 
            final CausalHypothesis hypothesis, final Factor testFactor, final DataModel dataModel){
        final DifferenceTest test1 = new DifferenceTest();
        final ComplexCause c = hypothesis.getComplexCauses().get(0);
        final Factor causeFactor = c.get(0);
        
        test1.addLeftSideFactor(causeFactor);
        
        test1.setTopFactor(hypothesis.getEffect());
        test1.addHomogenFactor(testFactor);
        
        final MultipleContingencyTable table = test1.perform(dataModel);
        final MultipleCausalTable result = TestInterpreter.createMultipleCausalTable(table, table.averageCellValue());
        final List<MultipleCausalTableLine> lines = result.getLines();
        boolean found = false;
        for (int j = 0; j < lines.size(); j++){
            MultipleCausalTableLine line = lines.get(j);
            MultipleCausalTableCell a = line.getA();
            MultipleCausalTableCell b = line.getB();
            if ((a.isValue() == false) && (b.isValue())){
                found = true;
            }else{
                found = false;
            }
        }//for
        
        final DifferenceTest test2 = new DifferenceTest();
        test2.setTopFactor(hypothesis.getEffect());
        test2.addLeftSideFactor(causeFactor);
        final Factor copy = testFactor.copy();
        copy.negate();
        test2.addHomogenFactor(copy);
        
        //do second test here
        final MultipleContingencyTable table2 = test2.perform(dataModel);
        final MultipleCausalTable result2 = TestInterpreter.createMultipleCausalTable(table2, table2.averageCellValue());
        final List<MultipleCausalTableLine> lines2 = result2.getLines();
        
        for (int j = 0; j < lines2.size(); j++){
            MultipleCausalTableLine line = lines2.get(j);
            MultipleCausalTableCell a = line.getA();
            MultipleCausalTableCell b = line.getB();
            
            if ((a.isValue() == false) && (b.isValue())){
                found = true;
            }else{
                found = false;
            }
        }//for
        
        //evalute test resulsts, found is true when both tests were ok
        if (found){
            model.remove(hypothesis);
            final CausalHypothesis hyp1 = new CausalHypothesis("generated by InhomogentitySolver, at " + new Date().toString());
            final ComplexCause newC = new ComplexCause();
            newC.add(testFactor);
            hyp1.getComplexCauses().add(newC);
            hyp1.setEffect(causeFactor);
            model.add(hyp1);
            
            final CausalHypothesis hyp2 = new CausalHypothesis("generated by InhomogenitySolver, at " + new Date().toString());
            final ComplexCause newC2 = new ComplexCause();
            newC2.add(testFactor);
            hyp2.getComplexCauses().add(newC2);
            hyp2.setEffect(hypothesis.getEffect());
            model.add(hyp2);
        }
        
        return model;
    }
    
    /**
     *  this method checks for the third possibility
     */
    public static CausalModel isEffect(final CausalModel model, final CausalHypothesis hypothesis, 
            final Factor testFactor, final DataModel dataModel){
        final DifferenceTest test = new DifferenceTest();
        test.addLeftSideFactor(hypothesis.getEffect());
        test.setTopFactor(testFactor);
        final ContingencyTable table = test.simplePerform(dataModel);
        final CausalTable cTable = TestInterpreter.createCausalTable(table, (table.getNumberOfCases()/4));
        
        if ((cTable.isA() == true) && (cTable.isB() == false) && (cTable.isC() == false) && (cTable.isD() == true)){
            final CausalHypothesis hyp1 = new CausalHypothesis("generated by InhomogenitySolver, at " + new Date().toString());
            final ComplexCause c = new ComplexCause();
            c.add(hypothesis.getEffect());
            hyp1.getComplexCauses().add(c);
            hyp1.setEffect(testFactor);
            model.add(hyp1);
        }
        return model;      
    }
    
    /**
     *  tests for all three methods
     */
    public static CausalModel solveInhomogenities(CausalModel model, 
            final CausalHypothesis startHypothesis, final Factor testFactor, final DataModel dataModel){
        model = isBetween(model, startHypothesis, testFactor, dataModel);
        model = isCommonCause(model, startHypothesis, testFactor, dataModel);
        model = isEffect(model, startHypothesis, testFactor, dataModel);
        return model;
    }
}
